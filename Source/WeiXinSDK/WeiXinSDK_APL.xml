<?xml version="1.0" encoding="utf-8"?>
<!--GearVR plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- init section is always evaluated once per architecture -->
  <trace enable="true"/>
  <init>
    <log text="WeiXinSDK APL init"/>
  </init>

  <androidManifestUpdates>
    <addElements tag="application">
      <activity android:name="com.ChengduWonderVision.BlockMaster.wxapi.WXEntryActivity"
      android:launchMode="singleTop"
      android:exported="true"/>
    </addElements>

    <uses-permission android:name="android.permission.INTERNET"/>

    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>

    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>

    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>

    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

  </androidManifestUpdates>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert>
      -keep class com.tencent.mm.opensdk.** {
      *;
      }

      -keep class com.tencent.wxop.** {
      *;
      }

      -keep class com.tencent.mm.sdk.** {
      *;
      }
    </insert>
  </proguardAdditions>

  <resourceCopies>
    <!-- Copy the generated resource file to be packaged -->
    <copyFile src="$S(PluginDir)/../../lib/Android/libammsdk.jar" dst="$S(BuildDir)/libs/libammsdk.jar" />
    <copyFile src="$S(PluginDir)/../../Source/ThirdParty/Java/wxapi/WXEntryActivity.java" dst="$S(BuildDir)/src/com/ChengduWonderVision/BlockMaster/wxapi/WXEntryActivity.java" />
    <copyFile src="$S(PluginDir)/../../Source/ThirdParty/Java/wx_share.png" dst="$S(BuildDir)/res/drawable/wx_share.png" />
  </resourceCopies>


  <!-- optional additions to the GameActivity imports in GameActivity.java -->
  <gameActivityImportAdditions>
    <insert>

      // WeiXin
      import com.tencent.mm.sdk.openapi.IWXAPI;
      import com.tencent.mm.sdk.openapi.WXAPIFactory;
      import com.tencent.mm.sdk.openapi.IWXAPIEventHandler;
      import com.tencent.mm.sdk.openapi.BaseReq;
      import com.tencent.mm.sdk.openapi.BaseResp;
      import com.tencent.mm.sdk.openapi.GetMessageFromWX;
      import com.tencent.mm.sdk.openapi.WXAppExtendObject;
      import com.tencent.mm.sdk.openapi.WXImageObject;
      import com.tencent.mm.sdk.openapi.WXMediaMessage;
      import com.tencent.mm.sdk.openapi.WXMusicObject;
      import com.tencent.mm.sdk.openapi.WXTextObject;
      import com.tencent.mm.sdk.openapi.WXVideoObject;
      import com.tencent.mm.sdk.openapi.WXWebpageObject;
      import com.tencent.mm.sdk.openapi.SendMessageToWX;

      import android.graphics.Bitmap;
      import android.graphics.BitmapFactory;
      import android.graphics.Bitmap.CompressFormat;
      import java.io.ByteArrayOutputStream;
      import android.widget.Toast;

      import com.ChengduWonderVision.BlockMaster.R;
    </insert>
  </gameActivityImportAdditions>


  <!-- optional additions to the GameActivity class in GameActivity.java -->
  <gameActivityClassAdditions>
    <insert>
      <![CDATA[

  public native void nativeOnWXShareResult(String result, int code);
  
  // 微信APPID
  private static final String WECHAT_APP_ID = "wxbb08167f21b361a2";
  
  private IWXAPI m_wxApi;
  
  private Context m_context_WeChat;

  private static final int WECHAT_THUMB_SIZE = 150;

  public static byte[] WX_bmpToByteArray(final Bitmap bmp, final boolean needRecycle) {
    ByteArrayOutputStream output = new ByteArrayOutputStream();
    bmp.compress(CompressFormat.PNG, 100, output);
    if (needRecycle) {
      bmp.recycle();
    }
    
    byte[] result = output.toByteArray();
    try {
      output.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
    
    return result;
  }

  public IWXAPI getWXAPI(){
    return m_wxApi;
  }

  private String WX_buildTransaction(final String type) {
    return (type == null) ? String.valueOf(System.currentTimeMillis()) : type + System.currentTimeMillis();
  }

  public boolean AndroidThunkJava_WXSDK_isWXAppInstalledAndSupported() {
        boolean sIsWXAppInstalledAndSupported = m_wxApi.isWXAppInstalled() && m_wxApi.isWXAppSupportAPI();
        return sIsWXAppInstalledAndSupported;
    }

  /**
     * 分享到微信
     *
     * @param text              文字内容
     * @param isShareToTimeline false表示分享给朋友，true表示分享到朋友圈
     */
   
   public void AndroidThunkJava_WXSDK_sendReqText(String text, boolean isShareToTimeline) {
        Log.debug("WeChat Share Text Begin");

        // 初始化一个WXTextObject对象
        WXTextObject textObj = new WXTextObject();
        textObj.text = text;

        // 用WXTextObject对象初始化一个WXMediaMessage对象
        WXMediaMessage msg = new WXMediaMessage();
        msg.mediaObject = textObj;
        // 发送文本类型的消息时，title字段不起作用
        // msg.title = "Will be ignored";
        msg.description = text;

        // 构造一个Req
        SendMessageToWX.Req req = new SendMessageToWX.Req();
        req.transaction = WX_buildTransaction("text"); // transaction字段用于唯一标识一个请求
        req.message = msg;
    
    //要分享给好友还是分享到朋友圈
        req.scene = (isShareToTimeline) ? SendMessageToWX.Req.WXSceneTimeline : SendMessageToWX.Req.WXSceneSession;

        // 调用api接口发送数据到微信
        m_wxApi.sendReq(req);

        Log.debug("WeChat Share Text End");
    }
  
  /**
     * 发送图片到微信
     * @param title               标题
     * @param description         描述
     * @param imagePath           图片地址
     * @param thumbPath           缩略图图地址
     * @param isShareToTimeline false表示分享给朋友，true表示分享到朋友圈
     */
    public void AndroidThunkJava_WXSDK_sendReqImg(String title,String description, String imagePath, String thumbPath, boolean isShareToTimeline) {
        Log.debug("WeChat Share Img Begin");
		
		Bitmap bitmap = BitmapFactory.decodeFile(thumbPath);
        int width = bitmap.getWidth();
        int height = bitmap.getHeight();
        double scale =Math.sqrt(15000.0/height/width);

        Bitmap thumbBitmap = Bitmap.createScaledBitmap(bitmap,(int)(bitmap.getWidth()*scale),(int)(bitmap.getHeight()*scale),true);
        
		    WXMediaMessage mediaMessage = new WXMediaMessage();
        mediaMessage.title = title;
        mediaMessage.description = description;
        mediaMessage.setThumbImage(thumbBitmap);
		
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        thumbBitmap.compress(Bitmap.CompressFormat.JPEG,100,output);
        bitmap.recycle();
        mediaMessage.thumbData = output.toByteArray();

        try {
          output.close();
        } catch (Exception e) {
          e.printStackTrace();
        }

        Bitmap shareBitmap = BitmapFactory.decodeFile(imagePath);
        WXImageObject imgObj = new WXImageObject(shareBitmap);
        shareBitmap.recycle();
        mediaMessage.mediaObject = imgObj;

        SendMessageToWX.Req req = new SendMessageToWX.Req();
        req.message =  mediaMessage;
        req.transaction = WX_buildTransaction("img");
		    //要分享给好友还是分享到朋友圈
		    req.scene = (isShareToTimeline) ? SendMessageToWX.Req.WXSceneTimeline : SendMessageToWX.Req.WXSceneSession;
        m_wxApi.sendReq(req);

        Log.debug("WeChat Share Img End");
    }
  
  /**
     * 分享网址到微信
     *
     * @param webUrl            要分享的网址
     * @param title             标题
     * @param imagePath         图片地址
     * @param description       描述
     * @param isShareToTimeline false表示分享给朋友，true表示分享到朋友圈
     */
    public void AndroidThunkJava_WXSDK_sendReqWeb(String webUrl, String title, String imagePath, String description, boolean isShareToTimeline) {
        Log.debug("WeChat Share URL Begin");

        //File file = new File(imagePath);
        //if (!file.exists()) {
        //  String tip = "图片文件不存在";
        //  Toast.makeText(m_context_WeChat, tip + " imagePath = " + imagePath, Toast.LENGTH_LONG).show();
        //  return;
        //}

        WXWebpageObject webpage = new WXWebpageObject();
        webpage.webpageUrl = webUrl;
        WXMediaMessage msg = new WXMediaMessage(webpage);
        msg.title = title;
        msg.description = description;

        Bitmap bmp = BitmapFactory.decodeResource(m_context_WeChat.getResources(), R.drawable.wx_share);  
        //Bitmap bmp = BitmapFactory.decodeFile(imagePath);
        Bitmap thumbBmp = Bitmap.createScaledBitmap(bmp, WECHAT_THUMB_SIZE, WECHAT_THUMB_SIZE, true);
        bmp.recycle();
        msg.thumbData = WX_bmpToByteArray(thumbBmp, true);

        SendMessageToWX.Req req = new SendMessageToWX.Req();
        req.transaction = WX_buildTransaction("webpage");
        req.message = msg;
        //要分享给好友还是分享到朋友圈
        req.scene = (isShareToTimeline) ? SendMessageToWX.Req.WXSceneTimeline : SendMessageToWX.Req.WXSceneSession;
        m_wxApi.sendReq(req);

        Log.debug("WeChat Share URL End");
    }
    
    ]]>
    </insert>
  </gameActivityClassAdditions>

  <!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
  <gameActivityReadMetadataAdditions>
    <insert>

    </insert>
  </gameActivityReadMetadataAdditions>

  <!-- optional additions to GameActivity onCreate in GameActivity.java -->
  <gameActivityOnCreateAdditions>
    <insert>
      <![CDATA[

  Log.debug("WeChat Register Begin");
    
  m_context_WeChat = getApplicationContext();
  
  // 通过WXAPIFactory工厂，获取到IWXAPI的实例
  m_wxApi = WXAPIFactory.createWXAPI(this,WECHAT_APP_ID, true);

  // 将应用的APPID注册到微信
  m_wxApi.registerApp(WECHAT_APP_ID);

  Log.debug("WeChat Register End");
    
  ]]>
    </insert>
  </gameActivityOnCreateAdditions>

  <!-- optional additions to GameActivity onDestroy in GameActivity.java -->
  <gameActivityOnDestroyAdditions>
    <insert>

    </insert>
  </gameActivityOnDestroyAdditions>


  <!-- optional additions to GameActivity onStart in GameActivity.java -->
  <gameActivityOnStartAdditions>
    <insert>

    </insert>
  </gameActivityOnStartAdditions>

  <!-- optional additions to GameActivity onStop in GameActivity.java -->
  <gameActivityOnStopAdditions>
    <insert>

    </insert>
  </gameActivityOnStopAdditions>


  <!-- optional additions to GameActivity onPause in GameActivity.java  -->
  <gameActivityOnPauseAdditions>
    <insert>
    </insert>
  </gameActivityOnPauseAdditions>


  <!-- optional additions to GameActivity onResume in GameActivity.java -->
  <gameActivityOnResumeAdditions>
    <insert>
    </insert>
  </gameActivityOnResumeAdditions>


  <!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
  <gameActivityOnActivityResultAdditions>
    <insert>
    </insert>
  </gameActivityOnActivityResultAdditions>


  <!-- optional libraries to load in GameActivity.java before libUE4.so -->
  <soLoadLibrary>
    <!-- need this if plugin enabled and supported architecture, even if not packaged for GearVR -->
    <!--  <if condition="bSupported">
      <true>
        <loadLibrary name="vrapi" failmsg="GearVR library not loaded and required!" />
      </true>
    </if> -->
  </soLoadLibrary>
</root>
